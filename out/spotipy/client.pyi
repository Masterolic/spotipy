import requests
from spotipy.exceptions import SpotifyException as SpotifyException
from spotipy.json_types import Album, Artist, Episode, Page, Show, SimplifiedAlbum, SimplifiedEpisode, Track
from spotipy.oauth2 import SpotifyAuthBase
from typing import Any, Dict, Iterable, List, Optional, TypeVar, Union

T = TypeVar('T')

class Spotify:
    max_retries: int = ...
    default_retry_codes: Any = ...
    country_codes: Any = ...
    prefix: str = ...
    access_token: Any = ...
    auth_manager: Any = ...
    proxies: Any = ...
    requests_timeout: Any = ...
    status_forcelist: Any = ...
    retries: Any = ...
    status_retries: Any = ...
    backoff_factor: Any = ...
    language: Any = ...
    def __init__(self, access_token: Optional[str]=..., auth_manager: Optional[SpotifyAuthBase]=..., requests_session: Union[requests.Session, bool]=..., proxies: Optional[Dict[str, str]]=..., requests_timeout: int=..., status_forcelist: Optional[Iterable[int]]=..., retries: int=..., status_retries: int=..., backoff_factor: float=..., language: Optional[str]=...) -> None: ...
    def __del__(self) -> None: ...
    def next(self, result: Page[T]) -> Optional[Page[T]]: ...
    def previous(self, result: Page[T]) -> Optional[Page[T]]: ...
    def track(self, track_id: str, market: Optional[str]=...) -> Track: ...
    TracksResponse: Any = ...
    def tracks(self, tracks: List[str], market: Optional[str]=...) -> TracksResponse: ...
    def artist(self, artist_id: str) -> Artist: ...
    ArtistsResponse: Any = ...
    def artists(self, artists: List[str]) -> ArtistsResponse: ...
    def artist_albums(self, artist_id: str, album_type: Optional[str]=..., country: Optional[str]=..., limit: int=..., offset: int=...) -> Page[SimplifiedAlbum]: ...
    def artist_top_tracks(self, artist_id: str, country: str=...) -> TracksResponse: ...
    def artist_related_artists(self, artist_id: str) -> ArtistsResponse: ...
    def album(self, album_id: str) -> Album: ...
    def album_tracks(self, album_id: str, limit: int=..., offset: int=..., market: Optional[str]=...) -> Any: ...
    AlbumsResponse: Any = ...
    def albums(self, albums: List[str]) -> AlbumsResponse: ...
    def show(self, show_id: str, market: Optional[str]=...) -> Show: ...
    ShowsResponse: Any = ...
    def shows(self, shows: List[str], market: Optional[str]=...) -> ShowsResponse: ...
    def show_episodes(self, show_id: str, limit: int=..., offset: int=..., market: Optional[str]=...) -> Page[SimplifiedEpisode]: ...
    def episode(self, episode_id: str, market: Optional[str]=...) -> Episode: ...
    def episodes(self, episodes: List[Episode], market: Optional[str]=...) -> Any: ...
    def search(self, q: str, limit: int=..., offset: int=..., type: str=..., market: Optional[str]=...) -> Any: ...
    def search_markets(self, q: str, limit: int=..., offset: int=..., type: str=..., markets: Optional[List[str]]=..., total: Optional[int]=...) -> Any: ...
    def user(self, user: str) -> Any: ...
    def current_user_playlists(self, limit: int=..., offset: int=...) -> Any: ...
    def playlist(self, playlist_id: str, fields: Optional[List[str]]=..., market: Optional[str]=..., additional_types: Iterable[str]=...) -> Any: ...
    def playlist_items(self, playlist_id: str, fields: Optional[List[str]]=..., limit: int=..., offset: int=..., market: Optional[str]=..., additional_types: Iterable[str]=...) -> Any: ...
    def playlist_cover_image(self, playlist_id: str) -> Any: ...
    def playlist_upload_cover_image(self, playlist_id: str, image_b64: str) -> Any: ...
    def user_playlists(self, user: str, limit: int=..., offset: int=...) -> Any: ...
    def user_playlist_create(self, user: str, name: str, public: bool=..., collaborative: bool=..., description: str=...) -> Any: ...
    def playlist_change_details(self, playlist_id: str, name: str, public: bool=..., collaborative: bool=..., description: str=...) -> Any: ...
    def current_user_unfollow_playlist(self, playlist_id: str) -> Any: ...
    def playlist_add_items(self, playlist_id: str, items: List[str], position: Optional[int]=...) -> Any: ...
    def playlist_replace_items(self, playlist_id: str, items: List[str]) -> Any: ...
    def playlist_reorder_items(self, playlist_id: str, range_start: int, insert_before: int, range_length: int=..., snapshot_id: Optional[str]=...) -> Any: ...
    def playlist_remove_all_occurrences_of_items(self, playlist_id: str, items: List[str], snapshot_id: Optional[str]=...) -> Any: ...
    def playlist_remove_specific_occurrences_of_items(self, playlist_id: str, items: List[str], snapshot_id: Optional[str]=...) -> Any: ...
    def current_user_follow_playlist(self, playlist_id: str) -> Any: ...
    def playlist_is_following(self, playlist_id: str, user_ids: List[str]) -> Any: ...
    def me(self): ...
    def current_user(self): ...
    def current_user_playing_track(self): ...
    def current_user_saved_albums(self, limit: int=..., offset: int=..., market: Optional[str]=...) -> Any: ...
    def current_user_saved_albums_add(self, albums: List[str]=...) -> Any: ...
    def current_user_saved_albums_delete(self, albums: List[str]=...) -> Any: ...
    def current_user_saved_albums_contains(self, albums: List[str]=...) -> Any: ...
    def current_user_saved_tracks(self, limit: int=..., offset: int=..., market: Optional[str]=...) -> Any: ...
    def current_user_saved_tracks_add(self, tracks: Optional[List[str]]=...) -> Any: ...
    def current_user_saved_tracks_delete(self, tracks: Optional[List[str]]=...) -> Any: ...
    def current_user_saved_tracks_contains(self, tracks: Optional[List[str]]=...) -> Any: ...
    def current_user_saved_episodes(self, limit: int=..., offset: int=..., market: Optional[str]=...) -> Any: ...
    def current_user_saved_episodes_add(self, episodes: Optional[List[str]]=...) -> Any: ...
    def current_user_saved_episodes_delete(self, episodes: Optional[List[str]]=...) -> Any: ...
    def current_user_saved_episodes_contains(self, episodes: Optional[List[str]]=...) -> Any: ...
    def current_user_saved_shows(self, limit: int=..., offset: int=..., market: Optional[str]=...) -> Any: ...
    def current_user_saved_shows_add(self, shows: Optional[List[str]]=...) -> Any: ...
    def current_user_saved_shows_delete(self, shows: Optional[List[str]]=...) -> Any: ...
    def current_user_saved_shows_contains(self, shows: Optional[List[str]]=...) -> Any: ...
    def current_user_followed_artists(self, limit: int=..., after: Optional[str]=...) -> Any: ...
    def current_user_following_artists(self, ids: Optional[List[str]]=...) -> Any: ...
    def current_user_following_users(self, ids: Optional[List[str]]=...) -> Any: ...
    def current_user_top_artists(self, limit: int=..., offset: int=..., time_range: str=...) -> Any: ...
    def current_user_top_tracks(self, limit: int=..., offset: int=..., time_range: str=...) -> Any: ...
    def current_user_recently_played(self, limit: int=..., after: Optional[int]=..., before: Optional[int]=...) -> Any: ...
    def user_follow_artists(self, ids: List[str]=...) -> Any: ...
    def user_follow_users(self, ids: List[str]=...) -> Any: ...
    def user_unfollow_artists(self, ids: List[str]=...) -> Any: ...
    def user_unfollow_users(self, ids: List[str]=...) -> Any: ...
    def featured_playlists(self, locale: Optional[str]=..., country: Optional[str]=..., timestamp: Optional[str]=..., limit: int=..., offset: int=...) -> Any: ...
    def new_releases(self, country: Optional[str]=..., limit: int=..., offset: int=...) -> Any: ...
    def category(self, category_id: str, country: Optional[str]=..., locale: Optional[str]=...) -> Any: ...
    def categories(self, country: Optional[str]=..., locale: Optional[str]=..., limit: int=..., offset: int=...) -> Any: ...
    def category_playlists(self, category_id: Optional[str]=..., country: Optional[str]=..., limit: int=..., offset: int=...) -> Any: ...
    def recommendations(self, seed_artists: Optional[List[str]]=..., seed_genres: Optional[List[str]]=..., seed_tracks: Optional[List[str]]=..., limit: int=..., country: Optional[str]=..., **kwargs: Dict[str, Any]) -> Any: ...
    def recommendation_genre_seeds(self): ...
    def audio_analysis(self, track_id: str) -> Any: ...
    def audio_features(self, tracks: List[str]=...) -> Any: ...
    def devices(self): ...
    def current_playback(self, market: Optional[str]=..., additional_types: Optional[str]=...) -> Any: ...
    def currently_playing(self, market: Optional[str]=..., additional_types: Optional[str]=...) -> Any: ...
    def transfer_playback(self, device_id: str, force_play: bool=...) -> Any: ...
    def start_playback(self, device_id: Optional[str]=..., context_uri: Optional[str]=..., uris: Optional[List[str]]=..., offset: Optional[int]=..., position_ms: Optional[int]=...) -> Any: ...
    def pause_playback(self, device_id: Optional[str]=...) -> Any: ...
    def next_track(self, device_id: Optional[str]=...) -> Any: ...
    def previous_track(self, device_id: Optional[str]=...) -> Any: ...
    def seek_track(self, position_ms: int, device_id: Optional[str]=...) -> Any: ...
    def repeat(self, state: str, device_id: Optional[str]=...) -> Any: ...
    def volume(self, volume_percent: int, device_id: Optional[str]=...) -> Any: ...
    def shuffle(self, state: bool, device_id: Optional[str]=...) -> Any: ...
    def add_to_queue(self, uri: str, device_id: Optional[str]=...) -> Any: ...
    def available_markets(self): ...
